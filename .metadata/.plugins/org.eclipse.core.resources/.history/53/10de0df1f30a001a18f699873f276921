package o1.adventure


/** The class `Adventure` represents text adventure games. An adventure consists of a player and
  * a number of areas that make up the game world. It provides methods for playing the game one
  * turn at a time and for checking the state of the game.
  *
  * N.B. This version of the class has a lot of "hard-coded" information which pertain to a very
  * specific adventure game that involves a small trip through a twisted forest. All newly created
  * instances of class `Adventure` are identical to each other. To create other kinds of adventure
  * games, you will need to modify or replace the source code of this class. */
class Adventure {

  /** The title of the adventure game. */
  val title = "Fuksin selviytymispeli"

  private val metro       = new Area("Metroasema", "Kyltissä lukee Aalto-yliopisto. \nMiksiköhän täällä on niin paljon kerjäläisiä? Onhan tämä kuitenkin Suomen köyhin postinumero..")
  private val kandi       = new Area("Kandidaattikeskus", "Tänne kuulemma eksyy helposti. Kuitenkin tärkeä rakennus, joten kannattaa yrittää pärjätä!")
  private val alvari      = new Area("Alvari", "Aika pitkä jono, mutta saattaisi silti olla odottamisen arvoista syödä. Mitä ihmeen laulua tuolta astiapalautuksen takaa kantautuu? ")
  private val otakaari    = new Area("Otakaari", "Peeveli sentään kun tämä on niin pitkä tie. Näistä risteyksistä pitäisi sitten valita mihin seuraavaksi suuntaisi. Hmm..")
  private val täffä       = new Area("Täffä Lounasravintola", "Ovelle asti jatkuu jono, jossa kuuluu parin teinipojan keskustelua: \nMake: skrrt pist däbi toho jos säki otit megist messii" +
                                     "Viljami: ofc bro [dab] meinasiks korkkaa jo jonos? \nMake: jea lit spagenttibileet käyntii!" )
  private val jmt         = new Area("Jämeräntaival", "Jostain täältä kantautuu musiikkia. ")
  private var smt         = new Area("Servin Maijan tie", "Kaikki talot näyttää samalta. Tänne ei ilman kutsua kannata tulla")
  private val smökki      = new Area("Servin mökki", "Tervetuloa Smökin fuksibileisiin! Täällä voi mennä tanssilattialle näyttämään taitoja. Lisäksi virvokkeita on tarjolla. Pidä hauskaa!")
  private val taikametsä  = new Area("Taikametsä", "Tämän pimeän ja salaperäisen metsän maagisuus piilee siinä, kuinka nopeasti se viekään Servin Maijan tieltä Servin mökille tai päinvastoin.")
  //private val jatkot      = new Area("Jatkot", "Ei mitään tietoa kenen kämpässä ollaan, mutta ihmisillä vaikuttaa olevan hauskaa. ")
  private val destination = ???

        metro.setNeighbors(Vector("north" -> kandi                                                                        ))
        kandi.setNeighbors(Vector("north" -> kandi,       "east" -> otakaari,   "south" -> alvari,      "west" -> metro   ))
       alvari.setNeighbors(Vector("north" -> kandi                                                                        ))
     otakaari.setNeighbors(Vector("north" -> smt,         "east" -> jmt,        "south" -> täffä,       "west" -> kandi   ))
        täffä.setNeighbors(Vector("north" -> otakaari                                                                     ))
          jmt.setNeighbors(Vector("north" -> smökki,                                                    "west" -> otakaari))
          smt.setNeighbors(Vector(                        "east" -> taikametsä, "south" -> otakaari                       ))
       smökki.setNeighbors(Vector("north" -> taikametsä,                        "south" -> jmt                            ))
   taikametsä.setNeighbors(Vector(                                              "south" -> smökki,      "west" -> smt     ))

  // TODO: place these two items in clearing and southForest, respectively
  clearing.addItem(new Item("battery", "It's a small battery cell. Looks new."))
  southForest.addItem(new Item("remote", "It's the remote control for your TV.\nWhat it was doing in the forest, you have no idea.\nProblem is, there's no battery."))

  /** The character that the player controls in the game. */
  val player = new Player(metro)

  /** The number of turns that have passed since the start of the game. */
  var turnCount = 0
  /** The maximum number of turns that this adventure game allows before time runs out. */
  val timeLimit = 40


  /** Determines if the adventure is complete, that is, if the player has won. */
  def isComplete = this.player.location == this.destination &&
  this.player.inventory.contains("battery") && this.player.inventory.contains("remote")

  /** Determines whether the player has won, lost, or quit, thereby ending the game. */
  def isOver = this.isComplete || this.player.hasQuit || this.turnCount == this.timeLimit

  /** Returns a message that is to be displayed to the player at the beginning of the game. */
  def welcomeMessage = "You are lost in the woods. Find your way back home.\n\nBetter hurry, 'cause Scalatut elämät is on real soon now. And you can't miss Scalkkarit, right?"


  /** Returns a message that is to be displayed to the player at the end of the game. The message
    * will be different depending on whether or not the player has completed their quest. */
  def goodbyeMessage = {
    if (this.isComplete)
      "Home at last... and phew, just in time! Well done!"
    else if (this.turnCount == this.timeLimit)
      "Oh no! Time's up. Starved of entertainment, you collapse and weep like a child.\nGame over!"
    else  // game over due to player quitting
      "Quitter!"
  }


  /** Plays a turn by executing the given in-game command, such as "go west". Returns a textual
    * report of what happened, or an error message if the command was unknown. In the latter
    * case, no turns elapse. */
  def playTurn(command: String) = {
    val action = new Action(command)
    val outcomeReport = action.execute(this.player)
    if (outcomeReport.isDefined) {
      this.turnCount += 1
    }
    outcomeReport.getOrElse("Unknown command: \"" + command + "\".")
  }


}

